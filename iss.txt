export const subscriptions = pgTable("subscriptions", {
	id: text("id").primaryKey().notNull(),
	userId: uuid("user_id").notNull().references(() => users.id),
	status: subscriptionStatus("status"),
	metadata: jsonb("metadata"),
	priceId: text("price_id").references(() => prices.id),
	quantity: integer("quantity"),
	cancelAtPeriodEnd: boolean("cancel_at_period_end"),
	created: timestamp("created", { withTimezone: true, mode: 'string' }).default(sql`now()`).notNull(),
	currentPeriodStart: timestamp("current_period_start", { withTimezone: true, mode: 'string' }).default(sql`now()`).notNull(),
	currentPeriodEnd: timestamp("current_period_end", { withTimezone: true, mode: 'string' }).default(sql`now()`).notNull(),
	endedAt: timestamp("ended_at", { withTimezone: true, mode: 'string' }).default(sql`now()`),
	cancelAt: timestamp("cancel_at", { withTimezone: true, mode: 'string' }).default(sql`now()`),
	canceledAt: timestamp("canceled_at", { withTimezone: true, mode: 'string' }).default(sql`now()`),
	trialStart: timestamp("trial_start", { withTimezone: true, mode: 'string' }).default(sql`now()`),
	trialEnd: timestamp("trial_end", { withTimezone: true, mode: 'string' }).default(sql`now()`),
});

///////////////////



// for quill editor . tsx



  // const wrapperRef = useCallback(async (wrapper: any) => {
  //   if (typeof window !== 'undefined') {
  //     if (wrapper === null) return;
  //     wrapper.innerHTML = '';
  //     const editor = document.createElement('div');
  //     wrapper.append(editor);
  //     const Quill = (await import('quill')).default;
  //     const QuillCursors = (await import('quill-cursors')).default;
  //     Quill.register('modules/cursors', QuillCursors);
  //     const q = new Quill(editor, {
  //       theme: 'snow',
  //       modules: {
  //         toolbar: TOOLBAR_OPTIONS,
  //         cursors: {
  //           transformOnTextChange: true,
  //         },
  //       },
  //     });
  //     setQuill(q);
  //   }
  // }, []);

const wrapperRef = useRef<HTMLDivElement>(null);
    
useEffect(() => {
  const wrapper = wrapperRef.current;
  if (typeof window !== 'undefined' && wrapper) {
    wrapper.innerHTML = '';
    const editor = document.createElement('div');
    wrapper.append(editor);
    import('quill').then((Quill) => {
      import('quill-cursors').then((QuillCursors) => {
        Quill.default.register('modules/cursors', QuillCursors.default);
        const q = new Quill.default(editor, {
          theme: 'snow',
          modules: {
            toolbar: TOOLBAR_OPTIONS,
            cursors: {
              transformOnTextChange: true,
            },
          },
        });
        setQuill(q);
      });
    });
  }
}, []);

// useEffect(() => {
//   const wrapper = wrapperRef.current;
//   if (typeof window !== 'undefined' && wrapper) {
//     wrapper.innerHTML = '';
//     const editor = document.createElement('div');
//     wrapper.append(editor);
//     import('quill').then((Quill) => {
//       import('quill-cursors').then((QuillCursors) => {
//         Quill.default.register('modules/cursors', QuillCursors.default);
//         const q = new Quill.default(editor, {
//           theme: 'snow',
//           modules: {
//             toolbar: TOOLBAR_OPTIONS,
//             cursors: {
//               transformOnTextChange: true,
//             },
//           },
//         });
//         setQuill(q);
        
//         q.on('text-change', () => {
//           if (saveTimerRef.current) {
//             clearTimeout(saveTimerRef.current);
//           }
//           saveTimerRef.current = setTimeout(() => {
//             saveContent(q);
//           }, 1000);
//         });
//       });
//     });
//   }
// }, []);




// const saveContent = async (q: any) => {
//   setSaving(true);
//   const content = q.getContents();
//   const contentStr = JSON.stringify(content);

//   if (dirType === 'file') {
//     await updateFile({ data: contentStr }, fileId);
//     dispatch({
//       type: 'UPDATE_FILE',
//       payload: { file: { data: contentStr }, fileId, folderId, workspaceId },
//     });
//   }
//   if (dirType === 'folder') {
//     await updateFolder({ data: contentStr }, fileId);
//     dispatch({
//       type: 'UPDATE_FOLDER',
//       payload: { folder: { data: contentStr }, folderId: fileId, workspaceId },
//     });
//   }
//   if (dirType === 'workspace') {
//     await updateWorkspace({ data: contentStr }, fileId);
//     dispatch({
//       type: 'UPDATE_WORKSPACE',
//       payload: { workspace: { data: contentStr }, workspaceId: fileId },
//     });
//   }

//   setSaving(false);
// };