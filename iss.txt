export const subscriptions = pgTable("subscriptions", {
	id: text("id").primaryKey().notNull(),
	userId: uuid("user_id").notNull().references(() => users.id),
	status: subscriptionStatus("status"),
	metadata: jsonb("metadata"),
	priceId: text("price_id").references(() => prices.id),
	quantity: integer("quantity"),
	cancelAtPeriodEnd: boolean("cancel_at_period_end"),
	created: timestamp("created", { withTimezone: true, mode: 'string' }).default(sql`now()`).notNull(),
	currentPeriodStart: timestamp("current_period_start", { withTimezone: true, mode: 'string' }).default(sql`now()`).notNull(),
	currentPeriodEnd: timestamp("current_period_end", { withTimezone: true, mode: 'string' }).default(sql`now()`).notNull(),
	endedAt: timestamp("ended_at", { withTimezone: true, mode: 'string' }).default(sql`now()`),
	cancelAt: timestamp("cancel_at", { withTimezone: true, mode: 'string' }).default(sql`now()`),
	canceledAt: timestamp("canceled_at", { withTimezone: true, mode: 'string' }).default(sql`now()`),
	trialStart: timestamp("trial_start", { withTimezone: true, mode: 'string' }).default(sql`now()`),
	trialEnd: timestamp("trial_end", { withTimezone: true, mode: 'string' }).default(sql`now()`),
});

///////////////////



// for quill editor . tsx



  // const wrapperRef = useCallback(async (wrapper: any) => {
  //   if (typeof window !== 'undefined') {
  //     if (wrapper === null) return;
  //     wrapper.innerHTML = '';
  //     const editor = document.createElement('div');
  //     wrapper.append(editor);
  //     const Quill = (await import('quill')).default;
  //     const QuillCursors = (await import('quill-cursors')).default;
  //     Quill.register('modules/cursors', QuillCursors);
  //     const q = new Quill(editor, {
  //       theme: 'snow',
  //       modules: {
  //         toolbar: TOOLBAR_OPTIONS,
  //         cursors: {
  //           transformOnTextChange: true,
  //         },
  //       },
  //     });
  //     setQuill(q);
  //   }
  // }, []);

const wrapperRef = useRef<HTMLDivElement>(null);
    
useEffect(() => {
  const wrapper = wrapperRef.current;
  if (typeof window !== 'undefined' && wrapper) {
    wrapper.innerHTML = '';
    const editor = document.createElement('div');
    wrapper.append(editor);
    import('quill').then((Quill) => {
      import('quill-cursors').then((QuillCursors) => {
        Quill.default.register('modules/cursors', QuillCursors.default);
        const q = new Quill.default(editor, {
          theme: 'snow',
          modules: {
            toolbar: TOOLBAR_OPTIONS,
            cursors: {
              transformOnTextChange: true,
            },
          },
        });
        setQuill(q);
      });
    });
  }
}, []);

// useEffect(() => {
//   const wrapper = wrapperRef.current;
//   if (typeof window !== 'undefined' && wrapper) {
//     wrapper.innerHTML = '';
//     const editor = document.createElement('div');
//     wrapper.append(editor);
//     import('quill').then((Quill) => {
//       import('quill-cursors').then((QuillCursors) => {
//         Quill.default.register('modules/cursors', QuillCursors.default);
//         const q = new Quill.default(editor, {
//           theme: 'snow',
//           modules: {
//             toolbar: TOOLBAR_OPTIONS,
//             cursors: {
//               transformOnTextChange: true,
//             },
//           },
//         });
//         setQuill(q);
        
//         q.on('text-change', () => {
//           if (saveTimerRef.current) {
//             clearTimeout(saveTimerRef.current);
//           }
//           saveTimerRef.current = setTimeout(() => {
//             saveContent(q);
//           }, 1000);
//         });
//       });
//     });
//   }
// }, []);




// const saveContent = async (q: any) => {
//   setSaving(true);
//   const content = q.getContents();
//   const contentStr = JSON.stringify(content);

//   if (dirType === 'file') {
//     await updateFile({ data: contentStr }, fileId);
//     dispatch({
//       type: 'UPDATE_FILE',
//       payload: { file: { data: contentStr }, fileId, folderId, workspaceId },
//     });
//   }
//   if (dirType === 'folder') {
//     await updateFolder({ data: contentStr }, fileId);
//     dispatch({
//       type: 'UPDATE_FOLDER',
//       payload: { folder: { data: contentStr }, folderId: fileId, workspaceId },
//     });
//   }
//   if (dirType === 'workspace') {
//     await updateWorkspace({ data: contentStr }, fileId);
//     dispatch({
//       type: 'UPDATE_WORKSPACE',
//       payload: { workspace: { data: contentStr }, workspaceId: fileId },
//     });
//   }

//   setSaving(false);
// };




///////////////////
original package.jsonb


/////

{
  "name": "project_",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev -p 3000",
    "build": "next build",
    "start": "next start -p 3000",
    "lint": "next lint",
    "push": "drizzle-kit push:pg",
    "pull": "drizzle-kit introspect:pg ",
    "generate": "drizzle-kit generate:pg",
    "drop": "drizzle-kit drop",
    "check": "drizzle-kit check:pg",
    "up": "drizzle-kit up:pg",
    "migrate": "bun run src/lib/supabase/migration.ts"
  },
  "dependencies": {
    "@dnd-kit/sortable": "^8.0.0",
    "@hookform/resolvers": "^3.4.2",
    "@radix-ui/react-accordion": "^1.1.2",
    "@radix-ui/react-alert-dialog": "^1.1.1",
    "@radix-ui/react-avatar": "^1.0.4",
    "@radix-ui/react-dialog": "^1.0.5",
    "@radix-ui/react-label": "^2.0.2",
    "@radix-ui/react-navigation-menu": "^1.1.4",
    "@radix-ui/react-popover": "^1.0.7",
    "@radix-ui/react-progress": "^1.0.3",
    "@radix-ui/react-scroll-area": "^1.0.5",
    "@radix-ui/react-select": "^2.0.0",
    "@radix-ui/react-separator": "^1.0.3",
    "@radix-ui/react-slider": "^1.1.2",
    "@radix-ui/react-slot": "^1.0.2",
    "@radix-ui/react-toast": "^1.1.5",
    "@radix-ui/react-tooltip": "^1.0.7",
    "@supabase/auth-helpers-nextjs": "^0.10.0",
    "@supabase/supabase-js": "^2.43.4",
    "bufferutil": "^4.0.8",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "dotenv": "^16.4.5",
    "drizzle-orm": "^0.30.9",
    "emoji-picker-react": "^4.9.3",
    "lucide-react": "^0.376.0",
    "next": "13.5.6",
    "next-themes": "^0.3.0",
    "pg": "^8.11.5",
    "postgres": "^3.4.4",
    "punycode": "^2.3.1",
    "quill": "^2.0.2",
    "quill-cursors": "^4.0.3",
    "react": "^18",
    "react-beautiful-dnd": "^13.1.1",
    "react-dom": "^18",
    "react-hook-form": "^7.51.5",
    "socket.io": "^4.7.5",
    "socket.io-client": "^4.7.5",
    "tailwind-merge": "^2.3.0",
    "tailwindcss-animate": "^1.0.7",
    "utf-8-validate": "^5.0.10",
    "uuid": "^9.0.1",
    "zod": "^3.23.8"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-beautiful-dnd": "^13.1.8",
    "@types/react-dom": "^18",
    "@types/uuid": "^9.0.8",
    "autoprefixer": "^10",
    "drizzle-kit": "^0.20.17",
    "eslint": "^8",
    "eslint-config-next": "13.5.6",
    "postcss": "^8",
    "tailwindcss": "^3",
    "typescript": "^5"
  },
  "description": "This is a [Next.js](https://nextjs.org/) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).",
  "main": "next.config.js",
  "author": "",
  "license": "ISC"
}
